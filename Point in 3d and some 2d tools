class point
{
public:
    long long x, y, z;
    point(long long emp1 = 0, long long emp2 = 0, long long emp3 = 0)
    {
        x = emp1;
        y = emp2;
        z = emp3;
    }
    point operator+(point b)
    {
        return point(this->x + b.x, this->y + b.y, this->z + b.z);
    }
    point operator-(point b)
    {
        return point(this->x - b.x, this->y - b.y, this->z - b.z);
    }
    point operator*(long long val)
    {
        return point(this->x * val, this->y * val, this->z * val);
    }
    point operator/(long long val)
    {
        return point(this->x / val, this->y / val, this->z / val);
    }
    point &operator=(point b)
    {
        this->x = b.x;
        this->y = b.y;
        this->z = b.z;
        return *this;
    }
    point &operator+=(point b)
    {
        *this = *this + b;
        return *this;
    }
    point &operator-=(point b)
    {
        *this = *this - b;
        return *this;
    }
    point &operator*=(long long val)
    {
        (*this) = (*this) * val;
        return *this;
    }
    point &operator/=(long long val)
    {
        (*this) = (*this) / val;
        return *this;
    }

    bool operator==(point b)
    {
        if (this->x == b.x && this->y == b.y && this->z == b.z)
            return true;
        else
            return false;
    }
};
long long dot(point a, point b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z;
}
point cross(point a, point b)
{
    return point(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
}
double ang(point a, point b)
{
    return acos(dot(a, b) / sqrt(dot(a, a) * dot(b, b)));
}
double rad_to_deg(double val)
{
    return val * 180 / M_PI;
}
double deg_to_rad(double val)
{
    return val * M_PI / 180;
}
long long signed_area_of_parallelogram(point a, point b, point c)
{
    return cross(b - a, c - b).z;
}
double area_of_triangle(point a, point b, point c)
{
    return abs(signed_area_of_parallelogram(a, b, c) / 2.0);
}
int direction(point a, point b, point c)
{
    long long t = signed_area_of_parallelogram(a, b, c);

    if (t < 0)
        return -1;
    else if (t > 0)
        return 1;
    else
        return 0;
}
double distance_between_points(point a, point b)
{
    double val1 = (double)a.x - (double)b.x;
    double val2 = (double)a.y - (double)b.y;
    double val3 = (double)a.z - (double)b.z;
    return sqrt(val1 * val1 + val2 * val2 + val3 * val3);
}// for 2d bodies
double area_of_polygon(point a[], int n)
{
    double area = 0;
    for (int i = 0; i < n; i++)
    {
        area -= (a[(i + 1) % n].x - a[i].x) * (a[(i + 1) % n].y + a[i].y);
        // i= n-1, a(0)->a(n-1)
    }
    area /= 2;
    return abs(area);
}
bool check_point_in_polygon(point a[], int n, point p)
{
   // for convex polygons 
    int l = 1, r = n - 2;
    while (l < r)
    {
        int x = (l + r) / 2;

        if (direction(a[0], a[x + 1], p) == 1)
            l = x + 1;
        else if (direction(a[0], a[x], p) == -1)
            r = x - 1;
        else
            l = r = x;
    }
    if (area_of_triangle(a[0], a[l], a[l + 1]) == area_of_triangle(a[0], a[l], p) + area_of_triangle(a[l], a[l + 1], p) + area_of_triangle(a[l + 1], a[0], p))
        return true;
    return false;
}
// minkowski sum it might contain redudant points not renoved in this fucntion
vector<point> minkowski_sum(vector<point> a, vector<point> b)
{
    int n = a.size(), m = b.size();
    // find the left most and bottom most point in both polygons as their index in l and r
    int l = 0;
    for (int i = 0; i < n; i++)
    {
        if (a[i].x < a[l].x || (a[i].x == a[l].x && a[i].y < a[l].y))
        {
            l = i;
        }
    }
    int r = 0;
    for (int i = 0; i < m; i++)
    {
        if (b[i].x < b[r].x || (b[i].x == b[r].x && b[i].y < b[r].y))
        {
            r = i;
        }
    }
    vector<point> v;
    for (int i = 0; i < n + m; i++)
    {
        v.push_back(a[l] + b[r]);
        if (cross(a[(l + 1) % n] - a[l], b[(r + 1) % m] - b[r]).z >= 0)
        {
            // this is lower (or below r) than r so take it
            l = (l + 1) % n;
        }
        else
        {
            r = (r + 1) % n;
        }
    }
    return v;
}
// remove reduandant point in minkowski sum final vector
vector<point> remove_redundant(vector<point> v, int n)
{
    vector<point> vv;
    unordered_set<int> mark;
    for (int i = 0; i < n; i++)
        if (direction(v[i], v[(i + 1) % (n)], v[(i + 2) % (n)]) == 0)
            mark.insert((i + 1) % (n));
    for (int i = 0; i < n; i++)
        if (!mark.count(i))
            vv.push_back(v[i]);
    return vv;
}
