{
	
	"named": {
		"prefix": "temp",
		"body": [
		  "using namespace std;",
		  "#include <bits/stdc++.h>",
		  "#define ll long long",
		  "#define ld long double",
		  "#define EL '\\n'",
		  "#define el '\\n'",
		  "#define rep(i, a, b) for (ll i = (a); i < (b); i++)",
		  "#define repd(i, a, b) for (ll i = (b)-1; i >= (a); i--)",
		  "#define large 1000000007",
		  "#define MOD 1000000007",
		  "#define pb push_back",
		  "#define MAX 10e+7",
		  "#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);",
		  "void solve()",
		  "{",
		  "$1",
		  "",
		  "}",
		  "int main()",
		  "{",
		  "     #ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\", \"r\", stdin);",
		  "    freopen(\"output.txt\", \"w\", stdout);",
		  "#endif",
		  "FASTIO",
		  " long long int t;",
		  " cin>>t;",
		  " while(t--)",
		  " {",
		  "  solve();",
		  "  ",
		  " }",
		  "  return 0;",
		  "}",
		  ""
		],
		"description": "named"
	  }
	  
,

	"rohit": {
		"prefix": "solutionsininiterval",
		"body": [
		  "int gcd(int a, int b, int& x, int& y) {",
		  "    if (b == 0) {",
		  "        x = 1;",
		  "        y = 0;",
		  "        return a;",
		  "    }",
		  "    int x1, y1;",
		  "    int d = gcd(b, a % b, x1, y1);",
		  "    x = y1;",
		  "    y = x1 - y1 * (a / b);",
		  "    return d;",
		  "}",
		  "",
		  "bool find_any_solution(int a, int b, int c, int &x0, int &y0, int &g) {",
		  "    g = gcd(abs(a), abs(b), x0, y0);",
		  "    if (c % g) {",
		  "        return false;",
		  "    }",
		  "",
		  "    x0 *= c / g;",
		  "    y0 *= c / g;",
		  "    if (a < 0) x0 = -x0;",
		  "    if (b < 0) y0 = -y0;",
		  "    return true;",
		  "}",
		  "void shift_solution(int & x, int & y, int a, int b, int cnt) {",
		  "    x += cnt * b;",
		  "    y -= cnt * a;",
		  "}",
		  "",
		  "int find_all_solutions(int a, int b, int c, int minx, int maxx, int miny, int maxy) {",
		  "    int x, y, g;",
		  "    if (!find_any_solution(a, b, c, x, y, g))",
		  "        return 0;",
		  "    a /= g;",
		  "    b /= g;",
		  "",
		  "    int sign_a = a > 0 ? +1 : -1;",
		  "    int sign_b = b > 0 ? +1 : -1;",
		  "",
		  "    shift_solution(x, y, a, b, (minx - x) / b);",
		  "    if (x < minx)",
		  "        shift_solution(x, y, a, b, sign_b);",
		  "    if (x > maxx)",
		  "        return 0;",
		  "    int lx1 = x;",
		  "",
		  "    shift_solution(x, y, a, b, (maxx - x) / b);",
		  "    if (x > maxx)",
		  "        shift_solution(x, y, a, b, -sign_b);",
		  "    int rx1 = x;",
		  "",
		  "    shift_solution(x, y, a, b, -(miny - y) / a);",
		  "    if (y < miny)",
		  "        shift_solution(x, y, a, b, -sign_a);",
		  "    if (y > maxy)",
		  "        return 0;",
		  "    int lx2 = x;",
		  "",
		  "    shift_solution(x, y, a, b, -(maxy - y) / a);",
		  "    if (y > maxy)",
		  "        shift_solution(x, y, a, b, sign_a);",
		  "    int rx2 = x;",
		  "",
		  "    if (lx2 > rx2)",
		  "        swap(lx2, rx2);",
		  "    int lx = max(lx1, lx2);",
		  "    int rx = min(rx1, rx2);",
		  "",
		  "    if (lx > rx)",
		  "        return 0;",
		  "    return (rx - lx) / abs(b) + 1;",
		  "}",
		  ""
		],
		"description": "all solution usinig euclid"
	  }
	  ,

	  "primes": {
		"prefix": "seive",
		"body": [
		  "vector<char> is_prime(10001, true);",
		  "void seive(int n)",
		  "{",
		  "//vector<char> is_prime(n+1, true);",
		  "is_prime[0] = is_prime[1] = false;",
		  "for (int i = 2; i <= n; i++) {",
		  "    if (is_prime[i] && (long long)i * i <= n) {",
		  "        for (int j = i * i; j <= n; j += i)",
		  "            is_prime[j] = false;",
		  "    }",
		  "}",
		  "}"
		],
		"description": "seive"
	  }
	  ,
	  "ncr": {
		"prefix": "ncr%p",
		"body": [
		  "const int N = 1000005;",
		  "ll factorialNumInverse[N + 1]; ",
		  "ll naturalNumInverse[N + 1]; ",
		  "ll fact[N + 1]; ",
		  "void InverseofNumber(ll p) ",
		  "{ ",
		  "    naturalNumInverse[0] = naturalNumInverse[1] = 1; ",
		  "    for (int i = 2; i <= N; i++) ",
		  "        naturalNumInverse[i] = naturalNumInverse[p % i] * (p - p / i) % p; ",
		  "} ",
		  "void InverseofFactorial(ll p) ",
		  "{ ",
		  "     factorialNumInverse[0] = factorialNumInverse[1] = 1; ",
		  "    for (int i = 2; i <= N; i++) ",
		  "        factorialNumInverse[i] = (naturalNumInverse[i] * factorialNumInverse[i - 1]) % p; ",
		  "} ",
		  "void factorial(ll p) ",
		  "{ ",
		  "    fact[0] = 1;  ",
		  "    for (int i = 1; i <= N; i++) { ",
		  "        fact[i] = (fact[i - 1] * i) % p; ",
		  "    } ",
		  "} ",
		  "ll Binomial(ll N, ll R, ll p) ",
		  "{ ",
		  "    ll ans = ((fact[N] * factorialNumInverse[R]) ",
		  "              % p * factorialNumInverse[N - R]) ",
		  "             % p; ",
		  "    return ans%p; ",
		  "}   ",
		  "ll power(ll x, ll y, ll p) ",
		  "{ ",
		  "    int res = 1;",
		  "    x = x % p;",
		  "    while (y > 0) ",
		  "    {  ",
		  "        if (y & 1) ",
		  "            res = (res*x) % p;  ",
		  "        y = y>>1; // y = y/2 ",
		  "        x = (x*x) % p; ",
		  "    } ",
		  "    return res; ",
		  "} "
		],
		"description": "ncr%p"
	  }
	  ,
	  "fenwicktree": {
		"prefix": "fenwicktree",
		"body": [
			"class BIT",
			"{",
			"int *ft, size;",
			"",
			"public:",
			"BIT(int n)",
			"{",
			"size = n;",
			"ft = new int[n + 1];",
			"fill_n(ft,n+1,0);",
			"}",
			"~BIT()",
			"{",
			"delete[] ft;",
			"}",
			"int sum(int b)",
			"{",
			"int sum = 0;",
			"for (; b; b -= b & (-b))",
			"sum += ft[b];",
			"return sum;",
			"}",
			"void update(int k, int v)",
			"{",
			"for (; k <= size; k += k & (-k))",
			"ft[k] += v;",
			"}",
			"int sumr(int a, int b)",
			"{",
			"return sum(b) - (a == 1 ? 0 : sum(a - 1));",
			"}",
			"int getValue(int x)",
			"{",
			"return sum(x) - sum(x - 1);",
			"}",
			"void changeElem(int x, int val)",
			"{",
			"update(x + 1, val - getValue(x));",
			"}",
			"void scaleDown(int c)",
			"{",
			"for (int i = 1; i <= size; i++)",
			"ft[i] /= c;",
			"}",
			"void scaleUp(int c)",
			"{",
			"for (int i = 1; i <= size; i++)",
			"ft[i] *= c;",
			"}",
			"};",
			""
		],
		"description": "fenwick tree"
	  }
	  ,
	  "temp1": {
		"prefix": "temp1",
		"body": [
		  "using namespace std;",
		  "#include <bits/stdc++.h>",
		  "#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);",
		  "void solve()",
		  "{",
		  "$1",
		  "",
		  "}",
		  "int main()",
		  "{",
		  "     #ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\", \"r\", stdin);",
		  "    freopen(\"output.txt\", \"w\", stdout);",
		  "#endif",
		  "FASTIO",
		  " long long int t;",
		  " cin>>t;",
		  " while(t--)",
		  "  solve();",
		  "  return 0;",
		  "}",
		  ""
		],
		"description": "named"
	  }
	  ,
	  
		"solutionofequation": {
			"prefix": "solutionofequation",
			"body": [
			  "int gcd(int a, int b, int& x, int& y) {",
			  "    if (b == 0) {",
			  "        x = 1;",
			  "        y = 0;",
			  "        return a;",
			  "    }",
			  "    int x1, y1;",
			  "    int d = gcd(b, a % b, x1, y1);",
			  "    x = y1;",
			  "    y = x1 - y1 * (a / b);",
			  "    return d;",
			  "}",
			  "",
			  "bool find_any_solution(int a, int b, int c, int &x0, int &y0, int &g) {",
			  "    g = gcd(abs(a), abs(b), x0, y0);",
			  "    if (c % g) {",
			  "        return false;",
			  "    }",
			  "",
			  "    x0 *= c / g;",
			  "    y0 *= c / g;",
			  "    if (a < 0) x0 = -x0;",
			  "    if (b < 0) y0 = -y0;",
			  "    return true;",
			  "}"
			],
			"description": "2 variable solution"
		  }
		  ,
		  "power": {
			"prefix": "exponent",
			"body": [
			 "#define MOD 1000000007",
			  "ll power(ll x, ll y, ll p) ",
			  "{ ",
			  "    int res = 1;",
			  "    x = x % p;",
			  "    while (y > 0) ",
			  "    {  ",
			  "        if (y & 1) ",
			  "            res = (res*x) % p;  ",
			  "        y = y>>1; // y = y/2 ",
			  "        x = (x*x) % p; ",
			  "    } ",
			  "    return res; ",
			  "} "
			],
			"description": "a power b"
		  }
	
}
