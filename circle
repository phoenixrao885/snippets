// in (x-x0)^2+(y-y0)^2=r
class circle
{
public:
    double x, y, r;
    circle(double emp1 = 0, double emp2 = 0, double emp3 = 0)
    {
        x = emp1, y = emp2, r = emp3;
    }
    bool operator==(circle a)
    {
        if (a.y == this->y && a.x == this->x && a.r == this->r)
            return true;
        return false;
    }
};
int check_incircle(circle a, point b)
{
    double val1 = (double)(((double)b.x - a.x) * (double)((double)b.x - a.x)) + (double)(((double)b.y - a.y) * (double)((double)b.y - a.y)) - (a.r * a.r);
    if (val1 == 0.0)
        return 0;
    if (val1 > 0)
        return 1;
    return -1;
}

bool is_tangent(circle a, line b)
{
    double val1 = distance_point_to_line(b, point(a.x, a.y));
    if (val1 == a.r)
        return true;
    return false;
}
double length_of_tangent(circle a, point b)
{
    //sqrt(S1)
    double val1 = (double)(((double)b.x - a.x) * (double)((double)b.x - a.x)) + (double)(((double)b.y - a.y) * (double)((double)b.y - a.y)) - (a.r * a.r);
    return sqrt(val1);
}
int no_of_points_of_intersection(circle a, circle b)
{
    if (a == b)
        return INT_MAX;
    double val1 = a.r + b.r;
    double val2 = distance_between_points(point(a.x, a.y), point(b.x, b.y));
    if (val1 == val2)
        return 1;
    else if (val2 == (abs(a.r - b.r)))
        return 1;
    else if (val2 > val1)
        return 0;
    else if (val2 < val1 && val2 > (abs(a.r - b.r)))
        return 2;
    return 0;
}
double angle_btwn_circles(circle a, circle b)
{
    double val1 = a.r * a.r + b.r * b.r - ((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
    double val2 = 2.0 * a.r * b.r;
    double val3 = val1 / val2;
    return rad_to_deg(acos(val3));
}
// radical axis // 2(g-g')x+2(f-f')y+c-c'=0;
// not implemented due to precission errors with value of c here
