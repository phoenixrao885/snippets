class line
{
public:
  ll a, b, c;
  line(ll x = 0, ll y = 0, ll z = 0)
  {
    a = x, b = y, c = z;
  }
  bool operator==(line x)
  {
    if (x.a == this->a && x.b == this->b && x.c == this->c)
      return true;
    return false;
  }
  bool operator!=(line x)
  {
    if (x.a == this->a && x.b == this->b && x.c == this->c)
      return false;
    return true;
  }
};
double slope(line x)
{
  if (x.b == 0 && x.a == 0)
    return 0.0;
  assert(x.b != 0);
  return -((double)x.a / (double)x.b);
}
double rad_to_deg(double val)
{
  return val * 180 / M_PI;
}
double deg_to_rad(double val)
{
  return val * M_PI / 180;
}
bool is_parallel(line x, line y)
{
  double val1 = (double)x.a / (double)y.a;
  double val2 = (double)x.b / (double)y.b;
  double val3 = (double)x.c / (double)y.c;
  return (val1 == val2 && val2 != val3);
}
bool is_horizontal(line x)
{
  if (x.a == 0)
    return true;
  return false;
}
bool is_vertical(line x)
{
  if (x.b == 0)
    return true;
  return false;
}
bool do_intersect(line x, line y)
{
  if (x == y || is_parallel(x, y))
    return false;
  if (is_vertical(x) && is_vertical(y) && !(x == y))
    return false;
  if (is_horizontal(x) && is_horizontal(y) && !(x == y))
    return false;
  double val1 = (double)x.a / (double)y.a;
  double val2 = (double)x.b / (double)y.b;
  return val1 != val2;
}
pair<double, double> intersection_point(line x, line y)
{
  double val1 = (double)x.a * (double)y.b - (double)y.a * (double)x.b;
  double val2 = (double)x.b * (double)y.c - (double)y.b * (double)x.c;
  double val3 = (double)x.c * (double)y.a - (double)y.c * (double)x.a;
  return make_pair(val2 / val1, val3 / val1);
}
double distance_point_to_line(line x, point a)
{
  double val1 = (double)x.a * (double)a.x + (double)x.b * (double)a.y + (double)x.c;
  double val2 = sqrt((double)x.a * (double)x.a + (double)x.b * (double)x.b);
  return (abs(val1)) / val2;
}
pair<double, double> image_in_line(line x, point a)
{
  double val1 = (double)x.a * (double)x.a + (double)x.b * (double)x.b;
  double val2 = (double)-2.0 * ((double)x.a * (double)a.x + (double)x.b * (double)a.y + (double)x.c);
  double val = val2 / val1;
  double p1 = (double)a.x + (double)x.a * (val);
  double p2 = (double)a.y + (double)x.b * (val);
  return make_pair(p1, p2);
}
pair<double, double> foot_of_perpendicular(line x, point a)
{
  double val1 = (double)x.a * (double)x.a + (double)x.b * (double)x.b;
  double val2 = -((double)x.a * (double)a.x + (double)x.b * (double)a.y + (double)x.c);
  double val = val2 / val1;
  double p1 = (double)a.x + (double)x.a * (val);
  double p2 = (double)a.y + (double)x.b * (val);
  return make_pair(p1, p2);
}
bool is_perperdicular(line a, line b)
{
  ll val1 = a.a * b.a;
  ll val2 = a.b * b.b;
  if (val1 == -1 * val2)
    return true;
  return false;
}
pair<double, double> angle_between_lines(line x, line y)
{
  // return angle in degree <small,large>
  double val1 = slope(x);
  double val2 = slope(y);
  double aa = atan((val1 - val2) / (1.0 + val1 * val2));
  double ab = atan(-1.0 * ((val1 - val2) / (1.0 + val1 * val2)));
  aa += (acos(-1));
  ab += (acos(-1));
  double pi = acos(-1);
  ///// % is not defined for double use floor technique here
  pair<double,double> p1;
  p1.first = min(aa, ab);
  p1.second = max(aa, ab);
  p1.first = rad_to_deg(p1.first);
  p1.second = rad_to_deg(p1.second);
  p1.first -= (((int)p1.first) / 180) * 180;
  p1.second -= (((int)p1.second) / 180) * 180;
  return make_pair(min(p1.first,p1.second),max(p1.first,p1.second));
}
bool on_line(line x, point a)
{
  if (x.a * a.x + x.b * a.y + x.c == 0)
    return true;
  return false;
}
int on_same_side(line x, point a, point b)
{
  ll val1 = x.a * a.x + x.b * a.y + x.c;
  ll val2 = x.a * b.x + x.b * b.y + x.c;
  if (val1 * val2 < 0)
    return 1;
  else if (val1 * val2 > 0)
    return -1;
  return 0;
}
// for a 2d line 
line eqn_from2points(point a, point b)
{
 ll val1 = b.y - a.y;
ll val2 = b.x - a.x;
line t;
t.a = val1;
 t.b = -1 * val2;
t.c = (val2 * a.y - val1 * a.x);
 return t;
}
